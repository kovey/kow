package router

import (
	"bytes"
	c "context"
	"io"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/kovey/kow/context"
	"github.com/kovey/pool"
	"github.com/stretchr/testify/assert"
)

func TestGroupGet(t *testing.T) {
	routers := NewRouters()
	group := NewGroup("user", routers)
	group.Middleware(&test_middle{})
	group.GET("get", newTestAction()).Data(&req_data{})
	w := httptest.NewRecorder()
	request := httptest.NewRequest(http.MethodGet, "/user/get", bytes.NewBuffer([]byte(`{"email":"kovey@kovey.com","password":"123456","age":18}`)))
	request.Header.Add(context.Content_Type_Key, context.Content_Type_Json)
	pc := pool.NewContext(c.Background())
	ctx := context.NewContext(pc, w, request)
	defer pc.Drop()
	routers.HandleHTTP(ctx)
	result := w.Result()
	assert.Equal(t, "200 OK", result.Status)
	assert.Equal(t, 200, result.StatusCode)
	assert.Equal(t, "test_middle_run", ctx.GetString("test_middle"))
	assert.Equal(t, "application/json", result.Header.Get("Content-Type"))
	defer result.Body.Close()
	body, err := io.ReadAll(result.Body)
	assert.Nil(t, err)
	assert.Equal(t, `{"email":"kovey@kovey.com","password":"123456","age":18}`, string(body))
}

func TestGroupPost(t *testing.T) {
	group := NewGroup("user", NewRouters())
	group.Middleware(&test_middle{})
	group.POST("post", newTestAction()).Data(&req_data{})
	w := httptest.NewRecorder()
	request := httptest.NewRequest(http.MethodPost, "/user/post", bytes.NewBuffer([]byte(`{"email":"kovey@kovey.com","password":"123456","age":18}`)))
	request.Header.Add(context.Content_Type_Key, context.Content_Type_Json)
	pc := pool.NewContext(c.Background())
	ctx := context.NewContext(pc, w, request)
	defer pc.Drop()
	group.routers.HandleHTTP(ctx)
	result := w.Result()
	assert.Equal(t, "200 OK", result.Status)
	assert.Equal(t, 200, result.StatusCode)
	assert.Equal(t, "test_middle_run", ctx.GetString("test_middle"))
	assert.Equal(t, "application/json", result.Header.Get("Content-Type"))
	defer result.Body.Close()
	body, err := io.ReadAll(result.Body)
	assert.Nil(t, err)
	assert.Equal(t, `{"email":"kovey@kovey.com","password":"123456","age":18}`, string(body))
}

func TestGroupPut(t *testing.T) {
	group := NewGroup("user", NewRouters())
	group.Middleware(&test_middle{})
	group.PUT("put", newTestAction()).Data(&req_data{})
	w := httptest.NewRecorder()
	request := httptest.NewRequest(http.MethodPut, "/user/put", bytes.NewBuffer([]byte(`{"email":"kovey@kovey.com","password":"123456","age":18}`)))
	request.Header.Add(context.Content_Type_Key, context.Content_Type_Json)
	pc := pool.NewContext(c.Background())
	ctx := context.NewContext(pc, w, request)
	defer pc.Drop()
	group.routers.HandleHTTP(ctx)
	result := w.Result()
	assert.Equal(t, "200 OK", result.Status)
	assert.Equal(t, 200, result.StatusCode)
	assert.Equal(t, "test_middle_run", ctx.GetString("test_middle"))
	assert.Equal(t, "application/json", result.Header.Get("Content-Type"))
	defer result.Body.Close()
	body, err := io.ReadAll(result.Body)
	assert.Nil(t, err)
	assert.Equal(t, `{"email":"kovey@kovey.com","password":"123456","age":18}`, string(body))
}

func TestGroupPatch(t *testing.T) {
	group := NewGroup("user", NewRouters())
	group.Middleware(&test_middle{})
	group.PATCH("patch", newTestAction()).Data(&req_data{})
	w := httptest.NewRecorder()
	request := httptest.NewRequest(http.MethodPatch, "/user/patch", bytes.NewBuffer([]byte(`{"email":"kovey@kovey.com","password":"123456","age":18}`)))
	request.Header.Add(context.Content_Type_Key, context.Content_Type_Json)
	pc := pool.NewContext(c.Background())
	ctx := context.NewContext(pc, w, request)
	defer pc.Drop()
	group.routers.HandleHTTP(ctx)
	result := w.Result()
	assert.Equal(t, "200 OK", result.Status)
	assert.Equal(t, 200, result.StatusCode)
	assert.Equal(t, "test_middle_run", ctx.GetString("test_middle"))
	assert.Equal(t, "application/json", result.Header.Get("Content-Type"))
	defer result.Body.Close()
	body, err := io.ReadAll(result.Body)
	assert.Nil(t, err)
	assert.Equal(t, `{"email":"kovey@kovey.com","password":"123456","age":18}`, string(body))
}

func TestGroupHead(t *testing.T) {
	group := NewGroup("user", NewRouters())
	group.Middleware(&test_middle{})
	group.HEAD("head", newTestAction()).Data(&req_data{})
	w := httptest.NewRecorder()
	request := httptest.NewRequest(http.MethodHead, "/user/head", bytes.NewBuffer([]byte(`{"email":"kovey@kovey.com","password":"123456","age":18}`)))
	request.Header.Add(context.Content_Type_Key, context.Content_Type_Json)
	pc := pool.NewContext(c.Background())
	ctx := context.NewContext(pc, w, request)
	defer pc.Drop()
	group.routers.HandleHTTP(ctx)
	result := w.Result()
	assert.Equal(t, "200 OK", result.Status)
	assert.Equal(t, 200, result.StatusCode)
	assert.Equal(t, "test_middle_run", ctx.GetString("test_middle"))
	assert.Equal(t, "application/json", result.Header.Get("Content-Type"))
	defer result.Body.Close()
	body, err := io.ReadAll(result.Body)
	assert.Nil(t, err)
	assert.Equal(t, `{"email":"kovey@kovey.com","password":"123456","age":18}`, string(body))
}

func TestGroupDelete(t *testing.T) {
	group := NewGroup("user", NewRouters())
	group.Middleware(&test_middle{})
	group.DELETE("delete", newTestAction()).Data(&req_data{})
	w := httptest.NewRecorder()
	request := httptest.NewRequest(http.MethodDelete, "/user/delete", bytes.NewBuffer([]byte(`{"email":"kovey@kovey.com","password":"123456","age":18}`)))
	request.Header.Add(context.Content_Type_Key, context.Content_Type_Json)
	pc := pool.NewContext(c.Background())
	ctx := context.NewContext(pc, w, request)
	defer pc.Drop()
	group.routers.HandleHTTP(ctx)
	result := w.Result()
	assert.Equal(t, "200 OK", result.Status)
	assert.Equal(t, 200, result.StatusCode)
	assert.Equal(t, "test_middle_run", ctx.GetString("test_middle"))
	assert.Equal(t, "application/json", result.Header.Get("Content-Type"))
	defer result.Body.Close()
	body, err := io.ReadAll(result.Body)
	assert.Nil(t, err)
	assert.Equal(t, `{"email":"kovey@kovey.com","password":"123456","age":18}`, string(body))
}

func TestGroupConnect(t *testing.T) {
	group := NewGroup("user", NewRouters())
	group.Middleware(&test_middle{})
	group.CONNECT("connect", newTestAction()).Data(&req_data{})
	w := httptest.NewRecorder()
	request := httptest.NewRequest(http.MethodConnect, "/user/connect", bytes.NewBuffer([]byte(`{"email":"kovey@kovey.com","password":"123456","age":18}`)))
	request.Header.Add(context.Content_Type_Key, context.Content_Type_Json)
	pc := pool.NewContext(c.Background())
	ctx := context.NewContext(pc, w, request)
	defer pc.Drop()
	group.routers.HandleHTTP(ctx)
	result := w.Result()
	assert.Equal(t, "200 OK", result.Status)
	assert.Equal(t, 200, result.StatusCode)
	assert.Equal(t, "test_middle_run", ctx.GetString("test_middle"))
	assert.Equal(t, "application/json", result.Header.Get("Content-Type"))
	defer result.Body.Close()
	body, err := io.ReadAll(result.Body)
	assert.Nil(t, err)
	assert.Equal(t, `{"email":"kovey@kovey.com","password":"123456","age":18}`, string(body))
}

func TestGroupOptions(t *testing.T) {
	group := NewGroup("user", NewRouters())
	group.Middleware(&test_middle{})
	group.OPTIONS("options", newTestAction()).Data(&req_data{})
	w := httptest.NewRecorder()
	request := httptest.NewRequest(http.MethodOptions, "/user/options", bytes.NewBuffer([]byte(`{"email":"kovey@kovey.com","password":"123456","age":18}`)))
	request.Header.Add(context.Content_Type_Key, context.Content_Type_Json)
	pc := pool.NewContext(c.Background())
	ctx := context.NewContext(pc, w, request)
	defer pc.Drop()
	group.routers.HandleHTTP(ctx)
	result := w.Result()
	assert.Equal(t, "200 OK", result.Status)
	assert.Equal(t, 200, result.StatusCode)
	assert.Equal(t, "test_middle_run", ctx.GetString("test_middle"))
	assert.Equal(t, "application/json", result.Header.Get("Content-Type"))
	defer result.Body.Close()
	body, err := io.ReadAll(result.Body)
	assert.Nil(t, err)
	assert.Equal(t, `{"email":"kovey@kovey.com","password":"123456","age":18}`, string(body))
}

func TestGroupTrace(t *testing.T) {
	group := NewGroup("user", NewRouters())
	group.Middleware(&test_middle{})
	group.TRACE("trace", newTestAction()).Data(&req_data{})
	w := httptest.NewRecorder()
	request := httptest.NewRequest(http.MethodTrace, "/user/trace", bytes.NewBuffer([]byte(`{"email":"kovey@kovey.com","password":"123456","age":18}`)))
	request.Header.Add(context.Content_Type_Key, context.Content_Type_Json)
	pc := pool.NewContext(c.Background())
	ctx := context.NewContext(pc, w, request)
	defer pc.Drop()
	group.routers.HandleHTTP(ctx)
	result := w.Result()
	assert.Equal(t, "200 OK", result.Status)
	assert.Equal(t, 200, result.StatusCode)
	assert.Equal(t, "test_middle_run", ctx.GetString("test_middle"))
	assert.Equal(t, "application/json", result.Header.Get("Content-Type"))
	defer result.Body.Close()
	body, err := io.ReadAll(result.Body)
	assert.Nil(t, err)
	assert.Equal(t, `{"email":"kovey@kovey.com","password":"123456","age":18}`, string(body))
}

func TestGroupChildGet(t *testing.T) {
	routers := NewRouters()
	group := NewGroup("user", routers).Middleware(&test_middle{}).Group("opt").Middleware(&test_middle1{})
	group.GET("get", newTestAction()).Data(&req_data{})
	w := httptest.NewRecorder()
	request := httptest.NewRequest(http.MethodGet, "/user/opt/get", bytes.NewBuffer([]byte(`{"email":"kovey@kovey.com","password":"123456","age":18}`)))
	request.Header.Add(context.Content_Type_Key, context.Content_Type_Json)
	pc := pool.NewContext(c.Background())
	ctx := context.NewContext(pc, w, request)
	defer pc.Drop()
	routers.HandleHTTP(ctx)
	result := w.Result()
	assert.Equal(t, "200 OK", result.Status)
	assert.Equal(t, 200, result.StatusCode)
	assert.Equal(t, "test_middle_run", ctx.GetString("test_middle"))
	assert.Equal(t, "test_middle_run1", ctx.GetString("test_middle1"))
	assert.Equal(t, "application/json", result.Header.Get("Content-Type"))
	defer result.Body.Close()
	body, err := io.ReadAll(result.Body)
	assert.Nil(t, err)
	assert.Equal(t, `{"email":"kovey@kovey.com","password":"123456","age":18}`, string(body))
}
